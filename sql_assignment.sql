--2.1 SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT  * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS null;
--2.2 ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;
--2.3 INSERT INTO
INSERT INTO Genre (GenreId, Name) VALUES (26, 'Dubstep');
INSERT INTO Genre (GenreId, Name) VALUES (27, 'Trap');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (9, 'Truax', 'Daniel', 'Executive Janitor', 1, TO_DATE('1985-4-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2010-8-14 00:00:00','yyyy-mm-dd hh24:mi:ss'), '4387 King St.', 'Las Vegas', 'NV', 'United States', '45671', '+1 (780) 428-9482', '+1 (780) 867-5309', 'daniel@chinookcorp.com');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (10, 'Truax', 'Danielt', 'Vice Janitor', 9, TO_DATE('1985-4-1 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2010-8-14 00:00:00','yyyy-mm-dd hh24:mi:ss'), '4387 King St.', 'Las Vegas', 'NV', 'United States', '45671', '+1 (780) 428-9482', '+1 (780) 867-5309', 'danielt@chinookcorp.com');
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (60, 'Steve', 'Jobs', 'Apple', 'Av. Paul, 2022', 'San Fernando', 'CA', 'United States', '01310-200', '+55 (11) 3055-3211', '+55 (11) 3055-9021', 'boss@apple.com', 5);
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (61, 'Mark', 'Cuban', 'Dallas Mavericks', 'Ave. Ista, 202', 'Dallas', 'TX', 'United States', '45910', '+55 (11) 3055-1111', '+55 (77) 3055-9021', 'boss@mavericks.com', 5);
--2.4 UPDATE
UPDATE Customer SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
UPDATE Artist SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';
--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('2003-6-1 00:00:00','yyyy-mm-dd hh24:mi:ss') AND TO_DATE('2004-3-1 00:00:00','yyyy-mm-dd hh24:mi:ss');
--2.7 UPDATE
SELECT CustomerID FROM Customer WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
DELETE FROM INVOICELINE WHERE INVOICEID IN (SELECT INVOICEID FROM INVOICE WHERE CUSTOMERID = 32);
DELETE FROM INVOICE WHERE CUSTOMERID = 32;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
--3.1 System Defined Functions
CREATE OR REPLACE FUNCTION
GET_CURRENT_TIME
RETURN TIMESTAMP AS Z TIMESTAMP;
BEGIN
    Z := CURRENT_TIMESTAMP;
RETURN Z;
END;
/

CREATE OR REPLACE FUNCTION
GET_LENGTH(X IN CHAR)
RETURN NUMBER AS Z NUMBER;
BEGIN
    SELECT LENGTH (X) INTO Z FROM DUAL;
    DBMS_OUTPUT.PUT_LINE(Z);
RETURN Z;
END;
/

--3.2 System Defined Aggregate Functions
CREATE OR REPLACE FUNCTION
AVERAGE_INVOICE
RETURN NUMBER AS Z NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO Z
    FROM INVOICE;
RETURN Z;
END;
/

CREATE OR REPLACE FUNCTION
MAX_INVOICE
RETURN SYS_REFCURSOR AS S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT TRACKID
    FROM TRACK
    WHERE UNITPRICE = MAX(UNITPRICE);
RETURN Z;
END;
/

--3.3 User Defined Functions
CREATE OR REPLACE FUNCTION
AVERAGE_INVOICELINE_PRICE
RETURN NUMBER AS Z NUMBER;
    S SYS_REFCURSOR;
    IVL_PRICE INVOICELINE.UNITPRICE%TYPE;
    Cou NUMBER;
BEGIN
    Cou := 0;
    Z := 0;
    LOOP
        FETCH S INTO IVL_PRICE;
        EXIT WHEN S%NOTFOUND;
        Cou := Cou + 1;
        Z := Z + IVL_PRICE;
    END LOOP;
CLOSE S;
RETURN Z;
END;
/

--3.4 User Defined Table Valued Functions

CREATE OR REPLACE FUNCTION
YOUNG_EMPLOYEES
RETURN SYS_REFCURSOR AS S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT *
    FROM EMPLOYEE
    WHERE BIRTHDATE > TO_DATE('1968-12-31 00:00:00','yyyy-mm-dd hh24:mi:ss');
    CLOSE S;
    RETURN S;
END;
/
--4.1 Basic Stored Procedure
CREATE OR REPLACE PROCEDURE
GET_NAMES(S OUT SYS_REFCURSOR)
AS
BEGIN
    Open S FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/

--4.2 Stored Procedure Input Parameters
CREATE OR REPLACE PROCEDURE
UPDATE_PERSONAL_INFO(Eid IN NUMBER, Addr IN VARCHAR2, CI IN VARCHAR2, St IN VARCHAR2, 
Cou IN VARCHAR2, Postal_Code IN VARCHAR2, Ph IN VARCHAR2, fa IN VARCHAR2,
em IN VARCHAR2) AS
BEGIN
 UPDATE EMPLOYEE SET ADDRESS = Addr, CITY = CI, STATE = St, COUNTRY = Cou,
 POSTALCODE = Postal_Code, PHONE = ph, FAX = fa, EMAIL = EM
        WHERE EMPLOYEEID = Eid;
END;
/

CREATE OR REPLACE PROCEDURE
RETURN_MANAGERS(Eid IN NUMBER, S OUT SYS_REFCURSOR) AS
BEGIN
    OPEN S FOR
    SELECT *
    FROM EMPLOYEE
    WHERE EMPLOYEEID = Eid;
    RETURN S;
END
   
--4.3 Stored Procedure Output Parameters
CREATE OR REPLACE PROCEDURE
RETURN_CUSTOMER_INFO(Cid IN NUMBER, S OUT SYS_REFCURSOR) AS
BEGIN
    Open S FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CUSTOMER
    WHERE CUSTOMERID = Cid;
END;

--5.0 Transactions

CREATE OR REPLACE PROCEDURE
DELETE_INVOICE(INV_ID IN NUMBER) AS
BEGIN
    DELETE *
    FROM INVOICELINE
    WHERE INVOICELINEID in (
        SELECT INVOICELINEID
        FROM INVOICELINE
        WHERE INVOICEID = INV_ID;
    ):
    DELETE *
    FROM INVOICEID
    WHERE INVOICEID = INV_ID;
    COMMIT;
END;


CREATE OR REPLACE STORED PROCEDURE
INSERT_CUSTOMER(Cid IN NUMBER,Fir IN VARCHAR2, Lst IN VARCHAR2, Com IN VARCHAR, 
Addr IN VARCHAR2, Ci IN VARCHAR2, St IN VARCHAR2, 
Cou IN VARCHAR2, Postal_Code IN VARCHAR2, Ph IN VARCHAR2, fa IN VARCHAR2,
em IN VARCHAR2, Spt IN NUMBER) AS
BEGIN
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) 
VALUES (Cid, Fir, Lst, Com, Addr, Ci, St, Cou, Postal_Code, Ph, fa, em, Spt );
END
/
--6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('Employee added');
END;

CREATE OR REPLACE TRIGGER UPDATE_ALBUM
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('Album updated');
END;
/
CREATE OR REPLACE TRIGGER DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('Customer deleted');
END;
/
--7.1 INNER
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME 
FROM CUSTOMER INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
--7.2 OUTER
SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM INVOICE LEFT JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
--7.3 RIGHT
SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM RIGHT JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID;
--7.4 CROSS
SELECT *
FROM ALBUM
CROSS JOIN ARTIST ORDER BY ARTIST.NAME ASC;
--7.5 SELF
SELECT *
FROM EMPLOYEE E, EMPLOYEE M
WHERE E.REPORTSTO = M.REPORTSTO;
--7.6 COMPLICATED JOIN ASSIGNMENT
SELECT *
FROM ((((((((((CUSTOMER
INNER JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEEID = CUSTOMER.SUPPORTREPID)
INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID)
INNER JOIN INVOICELINE ON INVOICE.INVOICEID = INVOICELINE.INVOICEID)
INNER JOIN TRACK ON INVOICELINE.TRACKID = TRACK.TRACKID)
INNER JOIN PLAYLISTTRACK ON PLAYLISTTRACK.TRACKID = TRACK.TRACKID)
INNER JOIN PLAYLIST ON PLAYLIST.PLAYLISTID = PLAYLISTTRACK.PLAYLISTID)
INNER JOIN MEDIATYPE ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID)
INNER JOIN GENRE ON GENRE.GENREID = TRACK.GENREID)
INNER JOIN ALBUM ON TRACK.ALBUMID = ALBUM.ALBUMID)
INNER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID);

--9.0 Administration
--.bak file included






